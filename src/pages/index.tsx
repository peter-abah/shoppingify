import Head from "next/head";
import { GetServerSideProps, InferGetServerSidePropsType } from "next";
import { getServerSession } from "next-auth";
import { authOptions } from "./api/auth/[...nextauth]";
import { prisma } from "../../prisma/prisma";
import type { Item as ItemType } from "@prisma/client";
import Item from "@/components/item";
import Header from "@/components/header";
import { useAppStore } from "@/lib/store";
import { WithSerializedDates } from "../../types/generic";

export const getServerSideProps: GetServerSideProps = async (context) => {
  const session = await getServerSession(context.req, context.res, authOptions);
  if (!session) {
    return {
      redirect: {
        destination: "/api/auth/signin",
        permanent: false,
      },
    };
  }

  const categories = await prisma.category.findMany({
    where: { ownerId: session.user.id },
  });
  const items = await prisma.item.findMany({
    where: { ownerId: session.user.id },
  });

  // Serialize props to convert Date object to string since Nextjs only serializes scalar values
  const props = JSON.parse(JSON.stringify({ categories, items }));
  return { props };
};

// Keep track of when site is just loaded
let isSiteStart = true;

type HomeProps = InferGetServerSidePropsType<typeof getServerSideProps>;
export default function Home({ categories, items }: HomeProps) {
  const { initData } = useAppStore((state) => state.actions);
  let itemsFromStore = useAppStore((state) => state.items);

  // To avoid discrepancies between server-side and client-side rendering,
  // set the `itemsFromStore` variable to the items from the page props during app start.
  // This ensures consistency in the HTML output.
  if (isSiteStart) {
    itemsFromStore = items;
  }
  const itemsByCategory = groupItemsByCategory(itemsFromStore);

  if (isSiteStart) {
    initData(items, categories);
    isSiteStart = false;
  }

  return (
    <>
      <Head>
        <title>Shoppinify</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="main-container flex ml-24 mr-[24rem]">
        <div className="items-container flex-auto">
          <Header />
          {Array.from(itemsByCategory.entries()).map(([category, items]) => (
            <div key={category} className="mb-12">
              <h2 className="text-lg mb-[18px] font-medium">{category}</h2>
              <ol className="flex flex-wrap gap-x-5 gap-y-12">
                {items.map((item) => (
                  <li key={item.id} className="w-fit">
                    <Item item={item} />
                  </li>
                ))}
              </ol>
            </div>
          ))}
        </div>
      </main>
    </>
  );
}

function groupItemsByCategory(items: WithSerializedDates<ItemType>[]) {
  const result = new Map<string, WithSerializedDates<ItemType>[]>();
  for (let item of items) {
    if (result.has(item.categoryName)) {
      result.get(item.categoryName)!.push(item);
    } else {
      result.set(item.categoryName, [item]);
    }
  }

  return result;
}
